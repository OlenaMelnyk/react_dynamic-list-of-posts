{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","request","URL","a","action","content","params","method","body","fetch","result","json","resultData","data","getUserPosts","userId","posts","filter","post","getPostDetails","postId","PostsList","selectPost","selectedUser","useState","setPosts","undefined","selectedPostId","setSelectedPostId","useEffect","postList","fetchData","className","map","key","id","title","type","data-id","classnames","onClick","getPostComments","comments","comment","deleteComment","commentId","addComment","JSON","stringify","NewCommentForm","createComment","name","setName","email","setEmail","setBody","onSubmit","_event","preventDefault","value","onChange","target","placeholder","PostDetails","selectedId","setPost","setComments","isVisible","setVisible","wholePost","commentList","Promise","all","then","postDetails","postComments","removeComment","newComment","prevVisible","length","defaultProps","App","selectedUserId","setSelectedUserId","event","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9fa7d8ba.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport async function request(URL, action = 'GET', content) {\n  const params = { method: action };\n\n  if (action === 'POST' && content) {\n    params.body = content;\n  }\n\n  const result = await fetch(\n    `${BASE_URL}${URL}`,\n    params,\n  );\n  const resultData = await result.json();\n\n  return resultData.data;\n}\n","import { request } from './api';\n\nexport async function getUserPosts(userId) {\n  const posts = await request('/posts');\n\n  return userId > 0 ? posts.filter(post => post.userId === +userId) : posts;\n}\n\nexport async function getPostDetails(postId) {\n  const result = await request(`/posts/${postId}`);\n\n  return result;\n}\n","import React, { useState, useEffect } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { getUserPosts } from '../../api/posts';\n\nexport const PostsList = ({ selectPost, selectedUser }) => {\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(undefined);\n\n  useEffect(() => {\n    async function fetchData() {\n      const postList = await getUserPosts(selectedUser);\n\n      setPosts(postList);\n    }\n\n    fetchData();\n  }, [selectedUser]);\n\n  const showDetails = (id) => {\n    selectPost(id);\n    setSelectedPostId(id);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={`${post.id}`}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId || ''}]: `}</b>\n              {`${post.title || ''}`}\n            </div>\n            <button\n              type=\"button\"\n              data-id={post.id}\n              className={classnames(\n                'PostsList__button button',\n                { 'button--selected': (selectedPostId === post.id) },\n              )}\n              onClick={\n                () => showDetails(\n                  selectedPostId === post.id ? undefined : post.id,\n                )\n              }\n            >\n              {(selectedPostId === post.id) ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectPost: PropTypes.func.isRequired,\n  selectedUser: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport async function getPostComments(postId) {\n  const comments = await request(`/comments`);\n\n  return comments.filter(comment => comment.postId === +postId);\n}\n\nexport async function deleteComment(commentId) {\n  await request(`/comments/${commentId}`, 'DELETE');\n}\n\nexport async function addComment(comment) {\n  await request(`/comments`, 'POST', JSON.stringify(comment));\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ createComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const clearInputs = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(_event) => {\n        _event.preventDefault();\n        if (name && email && body) {\n          createComment({\n            name,\n            email,\n            body,\n          });\n        }\n\n        clearInputs();\n      }\n    }\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={_event => setName(_event.target.value)}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={_event => setEmail(_event.target.value)}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={_event => setBody(_event.target.value)}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  createComment: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment, addComment } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedId = undefined }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [isVisible, setVisible] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      const wholePost = getPostDetails(selectedId);\n      const commentList = await getPostComments(selectedId);\n\n      Promise.all([wholePost, commentList])\n        .then(([postDetails, postComments]) => {\n          setPost(postDetails);\n          setComments(postComments);\n        });\n    }\n\n    if (selectedId) {\n      fetchData();\n    } else {\n      setPost(null);\n    }\n  }, [selectedId]);\n\n  const removeComment = async(id) => {\n    await deleteComment(id);\n\n    const commentList = await getPostComments(selectedId);\n\n    setComments(commentList);\n  };\n\n  const createComment = async(comment) => {\n    const newComment = {\n      ...comment, postId: post.id,\n    };\n\n    await addComment(newComment);\n\n    const commentList = await getPostComments(selectedId);\n\n    setComments(commentList);\n  };\n\n  const toggleVisibility = () => {\n    setVisible(prevVisible => !prevVisible);\n  };\n\n  return (\n    post && (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{post.body}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"PostDetails__button button\"\n            onClick={toggleVisibility}\n          >\n            {isVisible ? 'Hide' : 'Show'}\n            {' '}\n            {comments.length}\n            {' '}\n            comments\n          </button>\n\n          {isVisible && (\n          <ul className=\"PostDetails__list\">\n            {\n              comments.map(comment => (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))\n            }\n          </ul>\n          )\n          }\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm createComment={createComment} />\n          </div>\n        </section>\n      </div>\n    )\n  );\n};\n\nPostDetails.propTypes = {\n  selectedId: PropTypes.number,\n};\n\nPostDetails.defaultProps = {\n  selectedId: undefined,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedPostId, setSelectedPostId] = useState(undefined);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const selectPost = (id) => {\n    setSelectedPostId(id);\n  };\n\n  const handleChange = (event) => {\n    setSelectedUserId(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList selectPost={selectPost} selectedUser={selectedUserId} />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails selectedId={selectedPostId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}